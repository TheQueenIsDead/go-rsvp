package templates

import (
	"go-rsvp/internal/database"
	"fmt"
)

templ Hello(name string) {
	<div>Hello, { name }</div>
}

templ Events(events []database.Event) {

	<h1>Events Template</h1>

    <div class="list-group">
        <div id="events">
            for _, event := range events {
                <a hx-get={ fmt.Sprintf("/events/%d", event.ID)} hx-trigger="click" hx-target="#content" hx-push-url={ fmt.Sprintf("/events/%d", event.ID)} class="list-group-item">
                    <h4 class="list-group-item-heading">{event.Name}</h4>
                    //<h5 class="list-group-item-heading">{event.Date} {event.Time}</h5>
                    <p class="list-group-item-text">{event.Description}</p>
                </a>
            }
        </div>
    </div>
}

templ NewEvent() {

<div id="new-event" hx-swap="outerHTML" hx-target="this">


<h1> New Event </h1>

<!--TODO: Add emoji selector to persist with event-->
<form hx-post="/api/events/new">

    <!-- Title -->
    <div class="form-group">
        <label class="form-text text-muted" for="name"><span>Name:</span><strong><span
                aria-label="required">*</span></strong></label>
        <input class="form-control" type="text" id="name" name="name" required/>
    </div>

    <!-- Description -->
    <div class="form-group">
        <label class="form-text text-muted" for="description"><span>Description:</span><strong><span
                aria-label="required">*</span></strong></label>
        <input class="form-control" type="text" id="description" name="description" required/>
    </div>

    <!-- Date -->
    <div class="form-group">
        <label class="form-text text-muted" for="date">Date:</label>
        // TODO: Get this working after templ import....
        <input class="form-control" type="date" id="date" name="date" value="<% today %>" required/>
    </div>

    <!-- Time -->
    <div class="form-group">
        <label class="form-text text-muted" for="time">Time:</label>
        <input class="form-control" type="time" id="time" name="time"/>
    </div>

    <!-- Minimum Attendees -->
    <!-- TODO: Validate 0 or more https://htmx.org/examples/inline-validation/ -->
    <div class="form-group">
        <label class="form-text text-muted" for="minimumAttendees">Required Attendees:</label>
        <input class="form-control" type="number" id="minimumAttendees" name="minimumAttendees" value="0"/>
    </div>

    <!-- Emoji Selector -->
    <div class="form-group">
        <label for="emojiSelector" class="form-text text-muted">Event Icon</label>
        <select multiple class="form-control" name="emoji" id="emojiSelector">
            <option class="btn btn-light btn-lg">📆</option>
            <option class="btn btn-light btn-lg">🍺</option>
            <option class="btn btn-light btn-lg">🎥</option>
            <option class="btn btn-light btn-lg">🐕</option>
            <option class="btn btn-light btn-lg">🍲</option>
            <option class="btn btn-light btn-lg">🏎</option>
            <option class="btn btn-light btn-lg">👟</option>
        </select>
    </div>

    <button type="submit" class="btn btn-primary mb-2">Create</button>
</form>

</div>

}

templ Event(event database.Event, attendees []database.Attendee, attending bool){
<div id="event" hx-swap="outerHTML" hx-target="this">
<h1> Event </h1>
    <div class="card">
        <div class="card-header text-center pt-4">

            <h1>{event.Emoji}</h1>

            <p class="text-uppercase">
                <strong>{event.Name}</strong>
            </p>

            <h3 class="mb-4">
                <strong>{event.Date.String()} {event.Time.String()}</strong>
                <small class="text-muted" style="font-size: 16px">/year</small>
            </h3>

            <h3 class="mb-3">{event.Name}</h3>
            <p class="mb-2">{event.Description}</p>


            @AttendEventButton(event, attending)

        </div>
        <div class="card-body">
            <ul>
              for _, attendee := range attendees {
                <p> {attendee.Name} </p>
              }
            </ul>
        </div>

        <span>
            <label for="attendeeCount">Reservation progress: </label>
            <meter id="attendeeCount" value={fmt.Sprint(len(attendees))} min="0" max={fmt.Sprint(event.MinimumAttendees)}></meter>
            <span> {fmt.Sprintf("%d / %d", len(attendees), event.MinimumAttendees)} </span>
        </span>
    </div>
</div>

    <!-- TODO: Fully change event to bootstrap template for delightful UI-->
    <!-- TODO: Calculate how many days until the event -->
    <!-- TODO: Display the event time nicely -->
    <!-- TODO: Add a button to attend and handle the API response better -->
    <!-- TODO: Convert progress to bootstrap component(?) -->
}

templ AttendEventButton(event database.Event, attending bool) {
    if attending {
        <button type="button" class="btn btn-secondary btn-rounded w-100 mb-3 disabled" disabled>
            Attending!
        </button>
    } else {
        <button type="button" hx-post={fmt.Sprintf("/api/events/%d/attend", event.ID)} class="btn btn-secondary btn-rounded w-100 mb-3">
            Attend
        </button>
    }
}